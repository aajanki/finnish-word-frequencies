{"text": "PACE SÄNKYRUNKO - Sänkyrungot - Tuotteet\nPACE SÄNKYRUNKO\nTyylikäs uutuusrunko.\nValitse sopiva koko ja sävy.\nKoko Rungon ulkomitat 140x200cm, 160x200cm tai 180x200cm.\nKorkeus 28cm.\nPatjan koko 140x200cm, 160x200cm tai 180x200cm. Koska rungossa ei ole upostusta patjalle, suosittelemme käyttämään Pace-rungossa yhtenäistä patjaa.\nMateriaali SFC-sertifioitu, lakattu massiivimänty.\nVäri Luonnonväri tai musta.\nToimitus Toimitetaan osina. Toimitusmyynti. Toimitusaika noin 4-6 viikkoa.\nKuljetus kotiovelle 30 €\nHinta sisältää rungon säleineen. Patja tilataan erikseen 'Futonpatjat'-sivulta. Ohessa pari esimerkkiä. Suosittelemme käyttämään Pacen kanssa kerroksellisia patjoja, kuten Cocos, Latex, Comfort ja Luxus.\n'; } // end mageworx fix } var imageBox = $('customoptions_images_' + optionId); if (imageBox) imageBox.hide(); // append option images elValueArr.each(function(optionValueId) { if (optionValueId!='' && opConfig.config[optionId][optionValueId] && opConfig.config[optionId][optionValueId].images) { opConfig.config[optionId][optionValueId].images.each(function(image, index) { if ((excludeFirstImage==0 && index==0) || index > 0) { if (liHtml) { if (image[1]) { imageHTML += liHtml.replace(new RegExp(\"{{data_image_index}}\",'g'), this.dataImageIndex).replace(new RegExp(\"{{big_image_url}}\",'g'), image[1]).replace(new RegExp(\"{{small_image_url}}\",'g'), image[1]).replace(new RegExp(\"{{title}}\",'g'), opConfig.config[optionId][optionValueId].title); // mageworx fix if (typeof(ProductMediaManager)!='undefined') mainImageHTML += ' '; this.dataImageIndex++; } } if (!liHtml || imageMode==2) { // mageworx fix if (index==0 || (excludeFirstImage==1 && index==1)) { this.newMainImageUrl = image[1]; this.newMainImageThumbnail = image[1]; this.newMainImageTitle = opConfig.config[optionId][optionValueId].title; } } } else if (el.type=='select-one' || el.type=='select-multiple') { if (imageBox) { imageBox.hide(); imageBox.innerHTML = ''+ ' '+ '';; imageBox.show(); } } }.bind(this)); } }.bind(this)); if (imageHTML) ul.innerHTML += imageHTML; // for ProductMediaManager if (mainImageHTML && imageMode !=3 ) { // mageworx fix var mainImageDiv = this.getMainImage().up('a'); // mageworx fix if (mainImageDiv) mainImageDiv.innerHTML += mainImageHTML; } } // show product gallery if (!this.hasOptionImages() && productImageLis) { productImageLis.each(function(li) { li.show(); }); } $$('.cloud-zoom-gallery').each(function(a) { if (a.up('div').style.display=='') { a.up('div').style.display = 'item'; } a.addClassName('cboxElement'); jQuery(a).CloudZoom(); zoomButton = jQuery(\"#zoom-btn\"); //Init lightbox MAGEWORX jQuery(\".lightbox-group\").colorbox({ rel:\t'lightbox-group', opacity:\t0.5, speed:\t300, current:\t'{current} / {total}', previous: '', next: '', close: '' //No comma here , maxWidth:'95%', maxHeight:'95%'\t}); //Product thumbnails - remove first one from gallery, it's already included in gallery by \"zoom\" button jQuery(\".cloud-zoom-gallery\").first().removeClass(\"cboxElement\"); //Remove clicked thumbnail from gallery, it's already included in gallery by \"zoom\" button jQuery(\".cloud-zoom-gallery\").click(function() { var mobileImgLabel = document.querySelector(\".mobile-img-label\"); if(mobileImgLabel) { mobileImgLabel.innerHTML = jQuery(this).attr(\"title\"); } zoomButton .attr('href', jQuery(this).attr('href')) .attr('title', jQuery(this).attr('title')); //First add gallery class to all thumbnails jQuery(\".cloud-zoom-gallery\").each(function() { jQuery(this).addClass(\"cboxElement\"); }); jQuery(this).removeClass(\"cboxElement\"); }); //On image change jQuery(document).on('product-media-manager-image-updated', function(e, data) { var img = data.img; //Add new image's URL to the zoom button's href attribute zoomButton.attr('href', img.attr('src')); zoomButton.attr('title', ''); jQuery(\".cloud-zoom-gallery\").each(function() { jQuery(this).addClass(\"cboxElement\"); }); }); //end MAGEWORX: on event }); if (typeof(ProductMediaManager)!='undefined') ProductMediaManager.init(); // change main image if (imageMode==2) { if (typeof(ProductMediaManager)=='undefined') this.changeMainImage(); else setTimeout('optionImages.changeMainImage()', 100); } } }, markProduct: function() { $$(this.ulId.join(' li, ') + ' li').each(function(li) { li.addClassName('li-product-image'); }); if (this.mainImageUrl=='') { var mainImage = this.getMainImage(); if (mainImage) { if (mainImage.hasClassName('MagicToolboxContainer')) { var elA = mainImage.down('a'); if (elA) { this.mainImageUrl = elA.href; var elImg = elA.down('img'); if (elImg.width) this.mainImageWidth = elImg.width; this.mainImageThumbnail = elImg.src; this.mainImageTitle = elImg.alt; } } else if (mainImage.hasClassName('zoom-image') || (mainImage.up('a') && mainImage.up('a').hasClassName('cloud-zoom'))) { // Easy Zoom 1.0 - jQuery plugin // Cloud Zoom V1.0.2 var elA = mainImage.up('a'); if (elA) { this.mainImageUrl = elA.href; } else { this.mainImageUrl = mainImage.src; } this.mainImageTitle = mainImage.alt; this.mainImageThumbnail = mainImage.src } else { this.mainImageUrl = mainImage.src; this.mainImageTitle = mainImage.alt; } } } this.prevMainImageUrl = this.mainImageUrl; }, getMainImage: function() { return $$('div.product-img-box div.MagicToolboxContainer', 'div.product-img-box div.main-image img', 'div.product-img-box .product-image img', '#image', '#image-main', 'div.img-box .product-image img#image-main').first(); }, changeMainImage: function() { if (!this.newMainImageUrl || this.newMainImageUrl==this.prevMainImageUrl) return; var mainImage = this.getMainImage(); if (!mainImage) return; if (!this.pageLoaded) { mainImage.hide(); setTimeout('optionImages.changeMainImage()', 100); return; } /*if (mainImage.hasClassName('MagicToolboxContainer')) { var elA = mainImage.down('a'); if (elA) { elA.down('img').width = this.mainImageWidth; MagicZoomPlus.update(elA.id, this.newMainImageUrl, this.newMainImageThumbnail, 'show-title: false; drag-mode: false'); } } else if (typeof(ProductMediaManager)!='undefined') { $$(this.ulId.join(' li, ') + ' li').each(function(li) { var elA = li.down('a'); if (elA && elA.readAttribute('data-image-index')==this.newMainImageIndex) { elA.click(); } }.bind(this)); } else if (mainImage.hasClassName('zoom-image')) { // Easy Zoom 1.0 - jQuery plugin var elA = mainImage.up('a'); if (elA) elA.href = this.newMainImageUrl; mainImage.src = this.newMainImageUrl; mainImage.alt = this.newMainImageTitle; mainImage.title = this.newMainImageTitle; jQuery('#zoom').easyZoom({parent: 'div.zoom-container',\tpreload: '', lightboxBtn: '.lightbox-btn .lightbox'}).data('easyZoom').gallery('a.zoom-thumbnail'); } else if (mainImage.up('a') && mainImage.up('a').hasClassName('cloud-zoom')) { // ultimo + Cloud Zoom V1.0.2 var elA = mainImage.up('a'); if (elA) elA.href = this.newMainImageUrl; mainImage.src = this.newMainImageUrl; mainImage.alt = this.newMainImageTitle; mainImage.title = this.newMainImageTitle; if ($(\"zoom-btn\")) { $(\"zoom-btn\").href = this.newMainImageUrl; $(\"zoom-btn\").title = this.newMainImageTitle; } jQuery(\"#\"+elA.id).CloudZoom(); } else { mainImage.src = this.newMainImageUrl; mainImage.alt = this.newMainImageTitle; mainImage.title = this.newMainImageTitle; }*/ // mageworx fix var elA = mainImage.up('a'); if (elA) elA.href = this.newMainImageUrl; mainImage.src = this.newMainImageUrl; mainImage.alt = this.newMainImageTitle; mainImage.title = this.newMainImageTitle; if ($(\"zoom-btn\")) { $(\"zoom-btn\").href = this.newMainImageUrl; $(\"zoom-btn\").title = this.newMainImageTitle; } jQuery(\"#\"+elA.id).CloudZoom(); this.prevMainImageUrl = this.newMainImageUrl; mainImage.show(); }, hasOptionImages: function() { var result = false; var firstImageUrl = ''; $$(this.ulId.join(' li, ') + ' li').each(function(li) { if (li.hasClassName('li-product-image')==false) { // change main image if (!firstImageUrl) { var firstImageMatch = li.innerHTML.match(/(https?\\:\\/\\/.+?)[\\'\\\"]/); if (firstImageMatch) firstImageUrl = firstImageMatch[1]; this.newMainImageUrl = firstImageUrl; this.newMainImageThumbnail = firstImageUrl; this.newMainImageTitle = li.down('img').alt; if (typeof(ProductMediaManager)!='undefined') this.newMainImageIndex = li.down('a').readAttribute('data-image-index'); } result = true; } }.bind(this)); return result; } }; Event.observe(window, 'load', function() { opConfig.reloadPrice(); }); var dependentOptions = { dependentData: {\"19530\":[10,19],\"19531\":[13,20],\"19538\":[17,18]}, inGroupIdData: {\"10\":{\"dependency\":1,\"select_1107\":\"19532\"},\"19\":{\"dependency\":1,\"select_1107\":\"28547\"},\"13\":{\"dependency\":1,\"select_1108\":\"19535\"},\"20\":{\"dependency\":1,\"select_1108\":\"28548\"},\"17\":{\"dependency\":1,\"select_1109\":\"19539\"},\"18\":{\"dependency\":1,\"select_1109\":\"19540\"}}, defaultData: {\"select_1107\":\"19532\",\"select_1108\":\"19535\",\"select_1109\":\"19539\"}, dependentChanges: {\"m\":[], \"d\":[]}, dependentHide: true, select: function(el) { var i, ii = 0; if (el.type=='radio') { var radios = this.upDiv(el).getElementsByClassName('radio'); for (i=0; i < radios.length; i++) { this.returnSelect(radios[i]); } } else { this.returnSelect(el); } if (el.type && el.type=='checkbox' && !el.checked) { this.decorateIsLast(); return false; } if (el.disabled) return false; if (el.value>0) { // prepare value var elValueArr = []; if (el.multiple) { for (i=0; i < el.options.length; i++) { if (el.options[i].selected) elValueArr.push(el.options[i].value); } } else { elValueArr.push(el.value); } var mElementId = el.id; var dSelects = []; var isRequire = false; for (i=0; i < elValueArr.length; i++) { if (!this.dependentData[elValueArr[i]]) continue; this.dependentData[elValueArr[i]].each(function(IGI){ if (this.inGroupIdData[IGI]) { for(var dElementId in this.inGroupIdData[IGI]) { if (dElementId!='dependency' && dElementId!='out_of_stock' && dElementId!='view_mode' && $(dElementId)) { if (this.inGroupIdData[IGI][dElementId]) { var dElement = $(dElementId); if (!this.dependentChanges['m'][mElementId]) this.dependentChanges['m'][mElementId] = []; if (!this.dependentChanges['m'][mElementId][dElementId]) this.dependentChanges['m'][mElementId][dElementId] = []; this.dependentChanges['m'][mElementId][dElementId]['disabled'] = true; if (this.dependentChanges['m'][mElementId][dElementId]['is_require']) { isRequire = true; } else { isRequire = $(dElement).hasClassName('required-dependent'); } this.dependentChanges['m'][mElementId][dElementId]['is_require'] = isRequire; if (!this.dependentChanges['d'][dElementId]) this.dependentChanges['d'][dElementId] = []; if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) { // if [multi]select var selectValue = 's'+this.inGroupIdData[IGI][dElementId]; // if el not modified -> backup default options and clear if (!this.dependentChanges['d'][dElementId]['options']) { this.dependentChanges['d'][dElementId]['options'] = []; var opSelected = false; for (ii=0; ii < dElement.options.length; ii++) { if (this.defaultData[dElementId] && (this.defaultData[dElementId]==dElement.options[ii].value || this.defaultData[dElementId][dElement.options[ii].value])) opSelected = true; else opSelected = false; if (dElement.options[ii].value) this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[ii].value] = {'text':dElement.options[ii].text, 'selected':opSelected, 'sel-def':opSelected, 'disabled':dElement.options[ii].disabled}; } if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select } if (this.dependentChanges['d'][dElementId]['options'][selectValue]) { // set [multi]select flag use if (!this.dependentChanges['d'][dElementId]['options'][selectValue]['use']) this.dependentChanges['d'][dElementId]['options'][selectValue]['use'] = []; this.dependentChanges['d'][dElementId]['options'][selectValue]['use'].push(mElementId); this.dependentChanges['d'][dElementId]['options'][selectValue]['dependency'] = this.inGroupIdData[IGI].dependency; // commit changes if (!this.dependentChanges['m'][mElementId][dElementId]['options']) this.dependentChanges['m'][mElementId][dElementId]['options'] = []; this.dependentChanges['m'][mElementId][dElementId]['options'].push(selectValue); } } else { // if radio, checkbox, text, etc. if (!this.dependentChanges['d'][dElementId]['use']) this.dependentChanges['d'][dElementId]['use'] = []; this.dependentChanges['d'][dElementId]['use'].push(mElementId); this.dependentChanges['d'][dElementId]['dependency'] = this.inGroupIdData[IGI].dependency; } if ((this.dependentChanges['d'][dElementId]['use'] && this.dependentChanges['d'][dElementId]['use'].length >= this.inGroupIdData[IGI].dependency) || ((dElement.type=='select-one' || dElement.type=='select-multiple') && this.dependentChanges['d'][dElementId]['options'][selectValue] && this.dependentChanges['d'][dElementId]['options'][selectValue]['use'].length >= this.inGroupIdData[IGI].dependency)) { // set visibility if (!this.inGroupIdData[IGI].out_of_stock) dElement.disabled = false; if (this.dependentHide && this.inGroupIdData[IGI].view_mode!=2) { if (dElement.type=='checkbox' || dElement.type=='radio') { $(dElement).up('li').style.display = 'block'; } dependentOptions.upDiv(dElement).style.display = 'block'; } // set class required-entry if (isRequire) { $(dElement).removeClassName('required-dependent'); if (dElement.type=='checkbox' || dElement.type=='radio') { $(dElement).addClassName('validate-one-required-by-name'); } else { $(dElement).addClassName('required-entry'); } } // add or init dependent element if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) { // if [multi]select var selectValue = 's'+this.inGroupIdData[IGI][dElementId]; if (this.dependentChanges['d'][dElementId]['options'][selectValue]) { dSelects.push(dElement); // after add data to this [multi]select } } else { // if radio, checkbox, text, etc. if (this.defaultData[dElementId] && ($(dElementId).type=='checkbox' || $(dElementId).type=='radio') && this.inGroupIdData[IGI].dependency==this.dependentChanges['d'][dElementId]['use'].length) $(dElementId).click(); } } } } } } }.bind(this)); } if (dSelects.length>0) { for (i=0; i < dSelects.length; i++) { var dElement = dSelects[i]; var dElementId = dElement.id; // add data to [multi]select this.rememberNewSelected(dElement, dElementId); if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select for(var opValue in this.dependentChanges['d'][dElementId]['options']) { if (!this.dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !this.dependentChanges['d'][dElementId]['options'][opValue] || !this.dependentChanges['d'][dElementId]['options'][opValue]['use'] || this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length < this.dependentChanges['d'][dElementId]['options'][opValue]['dependency']) continue; var newOpt = new Option(this.dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1)); newOpt.disabled = this.dependentChanges['d'][dElementId]['options'][opValue]['disabled']; if (this.dependentChanges['d'][dElementId]['options'][opValue]['selected']) { newOpt.selected = true; //if (!newOpt.disabled) setTimeout('dependentOptions.select($(\"'+dElementId+'\"));', '100'); } dElement.options.add(newOpt); } dElement.onchange(); } } this.decorateIsLast(); } }, // cancel changes and return default options params returnSelect: function(el) { var mElementId = el.id; var i = 0; // reset main image to parent image option if dependent option has no image if (this.dependentChanges['d'][mElementId] && this.dependentChanges['d'][mElementId]['use']) { var dmElement = $(mElementId); if (dmElement.checked) { optionImages.showImage(dmElement); this.dependentChanges['d'][mElementId]['use'].each(function(el){ optionImages.showImage($(el)); }); } } if (this.dependentChanges['m'][mElementId] && !this.dependentChanges['m'][mElementId]['is_used']) { this.dependentChanges['m'][mElementId]['is_used'] = true; for(var dElementId in this.dependentChanges['m'][mElementId]) { if (!this.dependentChanges['m'][mElementId].hasOwnProperty(dElementId) || dElementId=='is_used' || !$(dElementId)) continue; var dElement = $(dElementId); var disableElFlag = true; // disable dependent el if (this.dependentChanges['m'][mElementId][dElementId]['disabled']) { if (this.dependentChanges['m'][mElementId][dElementId]['options'] && this.dependentChanges['d'][dElementId]['options']) { // to [multi]select this.rememberNewSelected(dElement, dElementId); // remove options if not use main el for (i=0; i < this.dependentChanges['m'][mElementId][dElementId]['options'].length; i++) { opValue = this.dependentChanges['m'][mElementId][dElementId]['options'][i]; if (this.dependentChanges['d'][dElementId]['options'][opValue] && this.dependentChanges['d'][dElementId]['options'][opValue]['use'] && this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length>0) { this.dependentChanges['d'][dElementId]['options'][opValue]['use'] = this.dependentChanges['d'][dElementId]['options'][opValue]['use'].without(mElementId); if (this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length < this.dependentChanges['d'][dElementId]['options'][opValue]['dependency']) { $$(\"#\"+dElementId+\" option[value='\"+opValue.substr(1)+\"']\").each(function(elOp){ elOp.remove(); }); } else { disableElFlag = false; } } } if (disableElFlag && (dElement.length>1 || (dElement.multiple && dElement.length>0))) disableElFlag = false; dElement.onchange(); } else { // to radio, checkbox, text, etc. if (this.dependentChanges['d'][dElementId]['use'] && this.dependentChanges['d'][dElementId]['use'].length > 0) { this.dependentChanges['d'][dElementId]['use'] = this.dependentChanges['d'][dElementId]['use'].without(mElementId); if (this.dependentChanges['d'][dElementId]['use'].length >= this.dependentChanges['d'][dElementId]['dependency']) disableElFlag = false; } } if (disableElFlag) { dElement.disabled = true; // restore default if [multi]select if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) { for(var opValue in this.dependentChanges['d'][dElementId]['options']) { if (!this.dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !this.dependentChanges['d'][dElementId]['options'][opValue]) continue; var newOpt = new Option(this.dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1)); newOpt.disabled = this.dependentChanges['d'][dElementId]['options'][opValue]['disabled']; newOpt.selected = this.dependentChanges['d'][dElementId]['options'][opValue]['sel-def']; dElement.options.add(newOpt); } dElement.onchange(); } // hide if (this.dependentHide) { var hideDivFlag = true; if (dElement.type=='checkbox' || dElement.type=='radio') { $(dElement).up('li').style.display = 'none'; ulEl = $(dElement).up('li').up('ul'); if (ulEl) { lis = ulEl.getElementsByTagName('li'); for (i=0; i < lis.length; i++) { if (lis[i].style.display=='block') { hideDivFlag = false; break; } } } } if (hideDivFlag) this.upDiv(dElement).style.display = 'none'; } // require if (this.dependentChanges['m'][mElementId][dElementId]['is_require']) { if (dElement.type=='checkbox' || dElement.type=='radio') { $(dElement).removeClassName('validate-one-required-by-name'); } else { $(dElement).removeClassName('required-entry'); } $(dElement).addClassName('required-dependent'); } optionImages.showImage(dElement); } } // return dependent->dependent etc.. if (disableElFlag && (dElement.type=='checkbox' || dElement.type=='radio') && dElement.checked) { dElement.checked = false; if (dElement.type=='checkbox') optionSetQtyProduct.checkboxQty(dElement); dependentOptions.returnSelect(dElement); } else if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) { dependentOptions.select(dElement); // that's right! } else if (disableElFlag && (dElement.type=='text' || dElement.type=='textarea' || dElement.type=='file')) { if (this.defaultData[dElementId]) dElement.value = this.defaultData[dElementId]; else dElement.value = ''; } } delete this.dependentChanges['m'][mElementId]; } }, rememberNewSelected: function(dElement, dElementId) { // remember new selected if (this.dependentChanges['d'][dElementId] && this.dependentChanges['d'][dElementId]['options']) { var opSelected = false; for (i=0; i < dElement.options.length; i++) { if (this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]) { if (dElement.options[i].selected && dElement.options[i].value>0) opSelected = true; else opSelected = false; this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]['selected'] = opSelected; } } } }, // for ie to work upDiv: function(el) { if (el.type=='checkbox' || el.type=='radio') { var div = el.up(4); if (!$(div).hasClassName('option')) div = div.up(1); return div; } else { return el.up('div.option'); } }, decorateIsLast: function() { var divs = $$('div.option'); if (divs) { var dl = false; var dd = false; divs.each(function(div, index){ if (div.style.display!='none' && !$(div).hasClassName('hidden')) { dl = div.down('dl'); if (dl) { if ($(dl).hasClassName('last')) $(dl).removeClassName('last'); dd = dl.down('dd'); if (dd && $(dd).hasClassName('last')) $(dd).removeClassName('last'); } } }.bind(this)); if (dl) $(dl).addClassName('last'); if (dd) $(dd).addClassName('last'); } }, applyDefaultValues: function(el) { for(var elementId in this.defaultData) { if (!this.defaultData.hasOwnProperty(elementId)) continue; if ($(elementId) && this.upDiv($(elementId)) && this.upDiv($(elementId)).style.display!=\"none\") { this.returnSelect($(elementId)); if ($(elementId).type=='select-one' || $(elementId).type=='text' || $(elementId).type=='textarea') { $(elementId).value = this.defaultData[elementId]; } else if ($(elementId).type=='select-multiple') { el = $(elementId); for (i=0; i < el.options.length; i++) { if (this.defaultData[elementId][el.options[i].value]) el.options[i].selected = true; } } else if ($(elementId).type=='checkbox' || $(elementId).type=='radio') { if ($(elementId).checked!=true) $(elementId).click(); } this.select($(elementId)); } } } }; // for correct decorating of options if (typeof(decorateGeneric)!='undefined') { var parentDecorateGeneric = decorateGeneric; decorateGeneric = function(elements, decorateParams) { parentDecorateGeneric(elements, decorateParams); dependentOptions.decorateIsLast(); }; } // Change Qty Input Invetory var optionsInventory = { changeInputQty: function(el) { if (!el) { return false; } var optionId = this._getOptionId(el); var valueId = el.value; if (el.type == 'radio') { var optionQty = $('options_'+optionId+'_qty'); } else if (el.type == 'checkbox') { var optionQty = $('options_'+optionId+'_'+valueId+'_qty'); } if (!optionQty) { return; } var minQty = 1; if (valueId != '' && opConfig.config[optionId][valueId].min_qty) { minQty = opConfig.config[optionId][valueId].min_qty; } $(optionQty).addClassName('validate-greater-than-zero'); if (!el.checked) { minQty = 0; $(optionQty).removeClassName('validate-greater-than-zero'); } this._changeDisabledQty(el, optionQty); optionQty.value = minQty; }, changeSelectQty: function(el) { if (!el) { return false; } var optionId = this._getOptionId(el); var valueIds = this._getValueIds(el); var optionQty = $('options_'+optionId+'_qty'); if (!optionQty) { return; } for (i=0; i < valueIds.length; i++) { var valueId = valueIds[i]; var minQty = 1; if (opConfig.config[optionId][valueId].min_qty) { minQty = opConfig.config[optionId][valueId].min_qty; } optionQty.value = minQty; } $(optionQty).addClassName('validate-greater-than-zero'); }, changeMultiSelectQty: function(optionId, valueId, selected) { var optionQty = $('options_'+ optionId +'_'+ valueId +'_qty'); if (!optionQty) { return; } optionQty.disabled = !selected; if (selected) { var minQty = 1; if (opConfig.config[optionId][valueId].min_qty) { minQty = opConfig.config[optionId][valueId].min_qty; } if (optionQty.value<=0) { optionQty.value = minQty; } $(optionQty).addClassName('validate-greater-than-zero'); } else { $(optionQty).removeClassName('validate-greater-than-zero'); } }, _getValueIds: function(el) { var ids = []; for (i=0; i < el.options.length; i++) { if (el.options[i].selected && el.options[i].value != '') { ids.push(el.options[i].value); } } return ids; }, _getOptionId: function(el) { var optionId = 0; el.name.sub(/[0-9]+/, function(match){ optionId = match[0]; }); return optionId; }, _changeDisabledQty: function(el, qty) { qty.disabled=!el.checked; }, }; Event.observe(window, 'load', function() { $$(\"input[type^='checkbox'].product-custom-option, input[type^='radio'].product-custom-option\").each(function(element){ Event.observe(element, 'change', function() { optionsInventory.changeInputQty(element); opConfig.reloadPrice(); }); }); $$(\"select[id^='select_'].product-custom-option\").each(function(element){ Event.observe(element, 'change', function() { optionsInventory.changeSelectQty(element); opConfig.reloadPrice(); }); }); }); // end Change Qty Input Invetory //]]>\n160x200cm +53,00 €\n180x200cm +101,00 €\nBLUES SÄNKYRUNKO", "timestamp": "2019-03-25T07:42:11Z", "url": "https://futonnetti.fi/kaikkituotteet/sankyrungot/pace-sankyrunko.html"}